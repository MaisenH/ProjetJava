package JDL;
import java.lang.Thread;
import java.util.ArrayList;
import java.util.Random;

public class Pandemie {
	String [][] tab;
	int nb_tours;
	int delai;
	ArrayList<Individu> liste;
	String Contamine;
	String NonContamine;
	
	//Le constructeur
	public Pandemie(String cont, String noncont, int v) {//v représente les différents états initiaux
		Contamine=cont; //Permet à l'utilisateur de choisir le symbole des contaminés et des non contaminés
		NonContamine=noncont;
		Boolean TRUE=true;
		Boolean FALSE=false;
		liste=new ArrayList<Individu>(); //L'objet individu contient deux états : contaminé et vacciné (True ou False)
		tab = new String[100][100];
		
		
		if(v==1) {//Premier état initial préenregistré avec 2000 contaminés et 1000 vaccinés
			int m=0;
			for (int i = 0;i < tab.length; i++) { //parcourt les lignes
		         for (int j = 0;j < tab[i].length;j++) { //parcours les colonnes
			        	 int k=i+j+m; // L'indice des éléments du tableau dans l'ArrayList Individu
			        	 int min_val = 10;
			             int max_val = 100;
			             Random ran = new Random(); 
			             int x = ran.nextInt(max_val) + min_val;//Retourne une valeur aléatoire entre 10 et 100
			             	if(x%2==0 && getContamines()<=2000) {
			             		tab[i][j] = Contamine;
			             		if(x%4==0 && getVaccines()<1000) {
				             			Individu i1=new Individu(TRUE,TRUE); //Certains des contaminés seront vaccinés
				             			liste.add(k,i1);
			             		}else{
			             			Individu i2=new Individu(FALSE,TRUE);// D'autres ne seront pas vaccinés
			             			liste.add(k,i2);
			             		}
			             	}
			             	else {//On fait pareil pour initialiser les non contaminés
			             		tab[i][j] = NonContamine;
			             		if(x%3==0 && getVaccines()<1000) {
				             			Individu i4=new Individu(TRUE,FALSE); //Certains des non contaminés seront vaccinés
				             			liste.add(k,i4);
			             		}else {
			             			Individu i3=new Individu(FALSE,FALSE); //D'autres non vaccinés
			             			liste.add(k,i3);
			             		}
			             	}
		         }
		         m+=99;
		}
		
       }
       
		if(v==2) {//Premier état initial préenregistré avec 2000 contaminés et 2000 vaccinés
			int m=0;
			for (int i = 0;i < tab.length; i++) { //parcourt les lignes
		         for (int j = 0;j < tab[i].length;j++) { //parcours les colonnes
			        	 int k=i+j+m; // L'indice des éléments du tableau dans l'ArrayList Individu
			        	 int min_val = 10;
			             int max_val = 100;
			             Random ran = new Random(); 
			             int x = ran.nextInt(max_val) + min_val;//Retourne une valeur aléatoire entre 10 et 100
			             	if(x%2==0 && getContamines()<=2000) {
			             		tab[i][j] = Contamine;
			             		if(x%4==0 && getVaccines()<2000) {
				             			Individu i1=new Individu(TRUE,TRUE); //Certains des contaminés seront vaccinés
				             			liste.add(k,i1);
			             		}else{
			             			Individu i2=new Individu(FALSE,TRUE);// D'autres ne seront pas vaccinés
			             			liste.add(k,i2);
			             		}
			             	}
			             	else {//On fait pareil pour initialiser les non contaminés
			             		tab[i][j] = NonContamine;
			             		if(x%3==0 && getVaccines()<2000) {
				             			Individu i4=new Individu(TRUE,FALSE); //Certains des non contaminés seront vaccinés
				             			liste.add(k,i4);
			             		}else {
			             			Individu i3=new Individu(FALSE,FALSE); //D'autres non vaccinés
			             			liste.add(k,i3);
			             		}
			             	}
		         }
		         m+=99;
		}
		
       }
		
		if(v==3) {//Premier état initial préenregistré avec 2000 contaminés et 3500 vaccinés
			int m=0;
			for (int i = 0;i < tab.length; i++) { //parcourt les lignes
		         for (int j = 0;j < tab[i].length;j++) { //parcours les colonnes
			        	 int k=i+j+m; // L'indice des éléments du tableau dans l'ArrayList Individu
			        	 int min_val = 10;
			             int max_val = 100;
			             Random ran = new Random(); 
			             int x = ran.nextInt(max_val) + min_val;//Retourne une valeur aléatoire entre 10 et 100
			             	if(x%2==0 && getContamines()<=2000) {
			             		tab[i][j] = Contamine;
			             		if(x%4==0 && getVaccines()<3500) {
				             			Individu i1=new Individu(TRUE,TRUE); //Certains des contaminés seront vaccinés
				             			liste.add(k,i1);
			             		}else{
			             			Individu i2=new Individu(FALSE,TRUE);// D'autres ne seront pas vaccinés
			             			liste.add(k,i2);
			             		}
			             	}
			             	else {//On fait pareil pour initialiser les non contaminés
			             		tab[i][j] = NonContamine;
			             		if(x%3==0 && getVaccines()<3500) {
				             			Individu i4=new Individu(TRUE,FALSE); //Certains des non contaminés seront vaccinés
				             			liste.add(k,i4);
			             		}else {
			             			Individu i3=new Individu(FALSE,FALSE); //D'autres non vaccinés
			             			liste.add(k,i3);
			             		}
			             	}
		         }
		         m+=99;
		}
		
       }
	}
	
	
	
	//Affiche le tableau
	public void affichTab() {
		for (int i = 0;i < tab.length; i++) {
	         for (int j = 0;j < tab[i].length;j++) {
	        	 System.out.print(tab[i][j] + " ");
	         }
	         System.out.println();
	      }
	}
	
	//Afficher liste
	public void afficheliste() {
		for(Individu i : liste) {
			System.out.println(i.getVaccine()+" "+i.getContamine());
		}
	}
	
	//Récupère la liste
	public ArrayList<Individu> getListe(){
		return liste;
	}
		
	//Retourne la valeur de contamination d'une case
	public int valeur_case(int i, int j) {
		if(tab[i][j]==Contamine) {
			return 1;
		}
		return 0;
	}
	
	public int total_voisins(int i,int j) {
		int somme=0;
		int n=tab.length;
		
		//Pour tous les cas de i
		if(i==0){
			if(j==0) {//En haut à gauche
				somme=valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i,n-1)+valeur_case(i+1,n-1)+valeur_case(n-1,j)+valeur_case(n-1,j+1)+valeur_case(n-1,n-1);
			}
			else if(j==tab.length-1) {//En haut à droite
				somme=valeur_case(i,j-1)+valeur_case(i+1,j-1)+valeur_case(i+1,j)+valeur_case(i,0)+valeur_case(i+1,0)+valeur_case(n-1,j-1)+valeur_case(n-1,j)+valeur_case(n-1,0);
			}
			else {//Le long de la première ligne
				somme=valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i,j-1)+valeur_case(i+1,j-1)+valeur_case(n-1,j-1)+valeur_case(n-1,j)+valeur_case(n-1,j+1);
			}
		}
		else if(i==tab.length-1) {
			if(j==0) {//En bas à gauche
				somme=valeur_case(i-1,j)+valeur_case(i,j+1)+valeur_case(i-1,j+1)+valeur_case(i,n-1)+valeur_case(i-1,n-1)+valeur_case(0,j)+valeur_case(0,j+1)+valeur_case(0,n-1);
			}
			else if(j==tab.length-1) {//En bas à droite
				somme=valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i,j-1)+valeur_case(i,0)+valeur_case(i-1,0)+valeur_case(0,j)+valeur_case(0,j-1)+valeur_case(0,0);
			}
			else {//Le long de la dernière ligne
				somme=valeur_case(i,j-1)+valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i-1,j+1)+valeur_case(i,j+1)+valeur_case(0,j-1)+valeur_case(0,j)+valeur_case(0,j+1);
			}
		}
		//Pour chaque cas de j
		else if(j==0 && i!=0 && i!=tab.length-1) {//Le long de la première colonne
			somme=valeur_case(i-1,j)+valeur_case(i-1,j+1)+valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i-1,n-1)+valeur_case(i,n-1)+valeur_case(i+1,n-1);
		}
		else if(j==tab.length-1 && i!=0 && i!=tab.length-1) {//Le long de la dernière colonne
			somme=valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i+1,j)+valeur_case(i+1,j-1)+valeur_case(i,j-1)+valeur_case(i-1,0)+valeur_case(i,0)+valeur_case(i+1,0);
		}
		else {//Le corps de la matrice
			somme=valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i-1,j+1)+valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i+1,j-1)+valeur_case(i,j-1);
		}
		return somme;
	}
	
	//Renvoie l'état de vaccination d'un individu (1 si vacciné, 0 sinon)
	public int valeur_vaccines(int i,int j) {
		int n=(tab.length-1);
		int m=n*i;
		int k=i+j+m; //Permet d'avoir l'indice précis d'un élement dans l'ArrayList
		Individu i6=liste.get(k);
		if(i6.getVaccine()==true) {
			return 1;
		}
		return 0;
	}
	
	public int total_voisins_vaccines(int i,int j) {
		int sommee=0;
		int n=tab.length;
		
		//Pour tous les cas de i
		if(i==0){
			if(j==0) {//En haut à gauche
				sommee=valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i,n-1)+valeur_vaccines(i+1,n-1)+valeur_vaccines(n-1,j)+valeur_vaccines(n-1,j+1)+valeur_vaccines(n-1,n-1);
			}
			else if(j==tab.length-1) {//En haut à droite
				sommee=valeur_vaccines(i,j-1)+valeur_vaccines(i+1,j-1)+valeur_vaccines(i+1,j)+valeur_vaccines(i,0)+valeur_vaccines(i+1,0)+valeur_vaccines(n-1,j-1)+valeur_vaccines(n-1,j)+valeur_vaccines(n-1,0);;
			}
			else {//Le long de la première ligne
				sommee=valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i,j-1)+valeur_vaccines(i+1,j-1)+valeur_vaccines(n-1,j-1)+valeur_vaccines(n-1,j)+valeur_vaccines(n-1,j+1);
			}
		}
		else if(i==tab.length-1) {
			if(j==0) {//En bas à gauche
				sommee=valeur_vaccines(i-1,j)+valeur_vaccines(i,j+1)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,n-1)+valeur_vaccines(i-1,n-1)+valeur_vaccines(0,j)+valeur_vaccines(0,j+1)+valeur_vaccines(0,n-1);
			}
			else if(j==tab.length-1) {//En bas à droite
				sommee=valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i,j-1)+valeur_vaccines(i,0)+valeur_vaccines(i-1,0)+valeur_vaccines(0,j)+valeur_vaccines(0,j-1)+valeur_vaccines(0,0);;
			}
			else {//Le long de la dernière ligne
				sommee=valeur_vaccines(i,j-1)+valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,j+1)+valeur_vaccines(0,j-1)+valeur_vaccines(0,j)+valeur_vaccines(0,j+1);
			}
		}
		//Pour chaque cas de j
		else if(j==0 && i!=0 && i!=tab.length-1) {//Le long de la première colonne
			sommee=valeur_vaccines(i-1,j)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i-1,n-1)+valeur_vaccines(i,n-1)+valeur_vaccines(i+1,n-1);
		}
		else if(j==tab.length-1 && i!=0 && i!=tab.length-1) {//Le long de la dernière colonne
			sommee=valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i+1,j)+valeur_vaccines(i+1,j-1)+valeur_vaccines(i,j-1)+valeur_vaccines(i-1,0)+valeur_vaccines(i,0)+valeur_vaccines(i+1,0);
		}
		else {//Le corps de la matrice
			sommee=valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i+1,j-1)+valeur_vaccines(i,j-1);
		}
		return sommee;
	}
	
	//Cette méthode prend en entrée une val minimal (nominateur), une val maximale (dénominateur) de la probabilité qu'un individu soit contaminé. On lance la méthode pour un nombre de tour défini, et retourne Contamine si x=1
	public String aleatoire(int min_val, int max_val, int tour) {
		if(tour==0) {
			return NonContamine;
		}
		for(int i=0;i<tour;i++) {
			Random ran = new Random();
	        int x = ran.nextInt(max_val) + min_val; //x a une chance sur 16 d'être égale à 1
	        if(x==1) {
	        	return Contamine;
	        }
		}
		return NonContamine;
	}
	public String resultat(int i, int j) {
		int m=0;
		if(i>0) {
			for(int l=0;l<m;l++) {
				m+=99;
			}
		}
		int k=i+j+m;
		Individu i10=liste.get(k);
		
		int a=total_voisins_vaccines(i,j);
		int b=total_voisins(i,j);
		int c=b-a;
		
		if(a>0) {
			if(i10.getVaccine()==true && i10.getContamine()==false) {
				if(aleatoire(1,16,a)=="1") {
					Individu i6=new Individu(true,true);
	     			liste.set(k,i6);
					return Contamine;
				}
			}else if(i10.getVaccine()==false &&i10.getContamine()==false){
				String xx=aleatoire(1,8,a);
	             
	             if(xx=="1") {
	            	Individu i6=new Individu(false,true);
	     			liste.set(k,i6);
	     			return Contamine;
	     			
	        }else if(i10.getContamine()==true) {
	        	return Contamine;
	        }else {
	        	return NonContamine;
	        }
		}
		}if(c>0){
				if(i10.getVaccine()==true &&i10.getContamine()==false) {
					String xxx=aleatoire(1,8,c);
		             
		             if(xxx=="1") {
		            	Individu i6=new Individu(true,true);
		     			liste.set(k,i6);
		     			return Contamine;
		             }
				}else if(i10.getVaccine()==false &&i10.getContamine()==false) {
					String xxxx=aleatoire(1,4,c);
		             
		             if(xxxx=="1") {
		            	Individu i6=new Individu(false,true);
		     			liste.set(k,i6);
		     			return Contamine;
		             }
				}else if(i10.getContamine()==true) {
					return Contamine;
				}else {
					return NonContamine;
				}
			}
		return NonContamine;
	}
	
	
	public String[][] tour() {
		String[][] tabb=new String[100][100];
		for (int i = 0;i < tabb.length; i++) {
	         for (int j = 0;j < tabb[i].length;j++) {
	        	 	tabb[i][j] = resultat(i,j);;
	      }
		}
		return tabb;
	}
	
	//Get Population
	public int getPopulation() {
		return liste.size();
	}
	
	//Get Vaccinés
	public int getVaccines() {
		int compte=0;
		for(Individu i : liste){
			if(i.getVaccine()==true) {
				compte+=1;
			}
		}
		return compte;
	}
	
	//Get Contaminés
	public int getContamines() {
		int compt=0;
		for(Individu i : liste){
			if(i.getContamine()==true) {
				compt+=1;
			}
		}
		return compt;
	}
		
	//Get Vaccinés et contaminés
	public int getVaccinesCont() {
		int comp=0;
		for(Individu i : liste){
			if(i.getVaccine()==true && i.getContamine()==true) {
				comp+=1;
			}
		}
		return comp;
	}
		
	//Get Non Vaccinés et contaminés
	public int getNonVaccinesCont() {
		int com=0;
		for(Individu i : liste){
			if(i.getVaccine()==false && i.getContamine()==true) {
				com+=1;
			}
		}
		return com;
	}
	
	public double getTauxVacCont() {
		double a=(double) getVaccinesCont();
		double b=(double) getVaccines();
		double c=(a/b)*100;
		
		return c;
	}
	
	public double getTauxNonVacCont() {
		double a=(double) getNonVaccinesCont();
		int t=getPopulation()-getVaccines();
		double b=(double) t;
		double d=(a/b)*100;
		
		return d;
	}	
	
	public double getTauxGlobCont() {
		double a=(double) getContamines();
		double b=(double) getPopulation();
		double c=(a/b)*100;
		
		return c;
	}
	
	public void run(int nb_tours,int delai){
		for(int i=0;i<nb_tours;i++) {
			int cc=getContamines();
			
			tab=tour();
			affichTab();
			int a=getPopulation();
			int b=getVaccines();
			int c=getContamines();
			int d=getVaccinesCont();
			int g=getNonVaccinesCont();
			int f=i+1;
			double h=getTauxVacCont();
			double k=getTauxNonVacCont();
			double l=getTauxGlobCont();
			System.out.println("Tour "+f);
			System.out.println("Populations : "+a);
			System.out.println("Vaccinés : "+b);
			System.out.println("Contaminés : "+c);
			System.out.println("Vaccinés contaminés : "+d);
			System.out.println("Non vaccinés contaminés : "+g);
			System.out.println("Taux des vaccinés contaminés : "+h+" %");
			System.out.println("Taux des non vaccinés contaminés : "+k+" %");
			System.out.println("Taux global de contamination : "+l+" %");
			
			try {
				Thread.sleep(delai);
			} catch (InterruptedException e) {
					// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//Arrêt lorsqu'aucun changement n'est détecté.
			if(cc==c || c==0) {
				break;
			}
		}
		System.out.println("Fin");
	}
	
}
