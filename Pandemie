package JDL;
import java.lang.Thread;
import java.util.ArrayList;
import java.util.Random;

public class Pandemie {
	String [][] tab;
	int nb_tours;
	int delai;
	ArrayList<Individu> liste;
	String Contamine;
	String NonContamine;
	
	//Le constructeur
	public Pandemie(String cont, String noncont) {
		Contamine=cont;
		NonContamine=noncont;
		Boolean TRUE=true;
		Boolean FALSE=false;
		liste=new ArrayList<Individu>();
		tab = new String[100][100];
		 for (int i = 0;i < tab.length; i++) {
	         for (int j = 0;j < tab[i].length;j++) {
	        	 int k=i+j;
	        	 int min_val = 10;
	             int max_val = 100;
	             Random ran = new Random();
	             int x = ran.nextInt(max_val) + min_val;
	             	if(x%2==0) {
	             		tab[i][j] = Contamine;
	             		if(x%4==0) {
	             			Individu i1=new Individu(TRUE,TRUE);
	             			liste.add(k,i1);
	             		}else {
	             			Individu i2=new Individu(FALSE,TRUE);
	             			liste.add(k,i2);
	             		}
	             	}
	             	else {
	             		tab[i][j] = NonContamine;
	             		if(x%3==0) {
	             			Individu i4=new Individu(TRUE,FALSE);
	             			liste.add(k,i4);
	             		}else {
	             			Individu i3=new Individu(FALSE,FALSE);
	             			liste.add(k,i3);
	             		}
	             	}
	         }
		 }
	}
	
	
	
	//Affiche le tableau
	public void affichTab() {
		for (int i = 0;i < tab.length; i++) {
	         for (int j = 0;j < tab[i].length;j++) {
	        	 System.out.print(tab[i][j] + " ");
	         }
	         System.out.println();
	      }
	}
	
	//Afficher liste
	public void afficheliste() {
		for(Individu i : liste) {
			System.out.println(i.getVaccine()+""+i.getContamine());
		}
	}
	
	//Retourne la liste
	public ArrayList<Individu> getListe(){
		return liste;
	}
		
	//Retourne la valeur
	public int valeur_case(int i, int j) {
		if(tab[i][j]==Contamine) {
			return 1;
		}
		return 0;
	}
	
	public int total_voisins(int i,int j) {
		int somme=0;
		int n=tab.length;
		
		//Pour tous les cas de i
		if(i==0){
			if(j==0) {//En haut à gauche
				somme=valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i,n-1)+valeur_case(i+1,n-1)+valeur_case(n-1,j)+valeur_case(n-1,j+1);
			}
			else if(j==tab.length-1) {//En haut à droite
				somme=valeur_case(i,j-1)+valeur_case(i+1,j-1)+valeur_case(i+1,j)+valeur_case(i,0)+valeur_case(i+1,0)+valeur_case(n-1,j-1)+valeur_case(n-1,j);
			}
			else {//Le long de la première ligne
				somme=valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i,j-1)+valeur_case(i+1,j-1)+valeur_case(n-1,j-1)+valeur_case(n-1,j)+valeur_case(n-1,j+1);
			}
		}
		else if(i==tab.length-1) {
			if(j==0) {//En bas à gauche
				somme=valeur_case(i-1,j)+valeur_case(i,j+1)+valeur_case(i-1,j+1)+valeur_case(i,n-1)+valeur_case(i-1,n-1)+valeur_case(0,j)+valeur_case(0,j+1);
			}
			else if(j==tab.length-1) {//En bas à droite
				somme=valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i,j-1)+valeur_case(i,0)+valeur_case(i-1,0)+valeur_case(0,j)+valeur_case(0,j-1);
			}
			else {//Le long de la dernière ligne
				somme=valeur_case(i,j-1)+valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i-1,j+1)+valeur_case(i,j+1)+valeur_case(0,j-1)+valeur_case(0,j)+valeur_case(0,j+1);
			}
		}
		//Pour chaque cas de j
		else if(j==0 && i!=0 && i!=tab.length-1) {//Le long de la première colonne
			somme=valeur_case(i-1,j)+valeur_case(i-1,j+1)+valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i-1,n-1)+valeur_case(i,n-1)+valeur_case(i+1,n-1);
		}
		else if(j==tab.length-1 && i!=0 && i!=tab.length-1) {//Le long de la dernière colonne
			somme=valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i+1,j)+valeur_case(i+1,j-1)+valeur_case(i,j-1)+valeur_case(i-1,0)+valeur_case(i,0)+valeur_case(i+1,0);
		}
		else {//Le corps de la matrice
			somme=valeur_case(i-1,j-1)+valeur_case(i-1,j)+valeur_case(i-1,j+1)+valeur_case(i,j+1)+valeur_case(i+1,j+1)+valeur_case(i+1,j)+valeur_case(i+1,j-1)+valeur_case(i,j-1);
		}
		return somme;
	}
	
	public int valeur_vaccines(int i,int j) {
		int k=i+j;
		Individu i6=liste.get(k);
		if(i6.getVaccine()==true) {
			return 1;
		}
		return 0;
	}
	
	public int total_voisins_vaccines(int i,int j) {
		int sommee=0;
		int n=tab.length;
		
		//Pour tous les cas de i
		if(i==0){
			if(j==0) {//En haut à gauche
				sommee=valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i,n-1)+valeur_vaccines(i+1,n-1)+valeur_vaccines(n-1,j)+valeur_vaccines(n-1,j+1);
			}
			else if(j==tab.length-1) {//En haut à droite
				sommee=valeur_vaccines(i,j-1)+valeur_vaccines(i+1,j-1)+valeur_vaccines(i+1,j)+valeur_vaccines(i,0)+valeur_vaccines(i+1,0)+valeur_vaccines(n-1,j-1)+valeur_vaccines(n-1,j);
			}
			else {//Le long de la première ligne
				sommee=valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i,j-1)+valeur_vaccines(i+1,j-1)+valeur_vaccines(n-1,j-1)+valeur_vaccines(n-1,j)+valeur_vaccines(n-1,j+1);
			}
		}
		else if(i==tab.length-1) {
			if(j==0) {//En bas à gauche
				sommee=valeur_vaccines(i-1,j)+valeur_vaccines(i,j+1)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,n-1)+valeur_vaccines(i-1,n-1)+valeur_vaccines(0,j)+valeur_vaccines(0,j+1);
			}
			else if(j==tab.length-1) {//En bas à droite
				sommee=valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i,j-1)+valeur_vaccines(i,0)+valeur_vaccines(i-1,0)+valeur_vaccines(0,j)+valeur_vaccines(0,j-1);
			}
			else {//Le long de la dernière ligne
				sommee=valeur_vaccines(i,j-1)+valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,j+1)+valeur_vaccines(0,j-1)+valeur_vaccines(0,j)+valeur_vaccines(0,j+1);
			}
		}
		//Pour chaque cas de j
		else if(j==0 && i!=0 && i!=tab.length-1) {//Le long de la première colonne
			sommee=valeur_vaccines(i-1,j)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i-1,n-1)+valeur_vaccines(i,n-1)+valeur_vaccines(i+1,n-1);
		}
		else if(j==tab.length-1 && i!=0 && i!=tab.length-1) {//Le long de la dernière colonne
			sommee=valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i+1,j)+valeur_vaccines(i+1,j-1)+valeur_vaccines(i,j-1)+valeur_vaccines(i-1,0)+valeur_vaccines(i,0)+valeur_vaccines(i+1,0);
		}
		else {//Le corps de la matrice
			sommee=valeur_vaccines(i-1,j-1)+valeur_vaccines(i-1,j)+valeur_vaccines(i-1,j+1)+valeur_vaccines(i,j+1)+valeur_vaccines(i+1,j+1)+valeur_vaccines(i+1,j)+valeur_vaccines(i+1,j-1)+valeur_vaccines(i,j-1);
		}
		return sommee;
	}
	
	public String resultat(int i, int j) {
		int k=i+j;
		Individu i5=liste.get(k);
		int h=total_voisins_vaccines(i,j);
		int g=total_voisins(i,j);
		if(h>0) {
			for(int m=0;m<h;m++) {
				if(i5.getVaccine()==true &&i5.getContamine()==false) {
					 int min_val = 1;
		             int max_val = 16;
		             Random ran = new Random();
		             int x = ran.nextInt(max_val) + min_val;
		             
		             if(x==1) {
		            	Individu i6=new Individu(true,true);
		     			liste.set(k,i6);
		     			return Contamine;
		             }else {
		            	 return NonContamine;
		             }
				}else if(i5.getVaccine()==false &&i5.getContamine()==false){
					 int min_val = 1;
		             int max_val = 8;
		             Random ran = new Random();
		             int x = ran.nextInt(max_val) + min_val;
		             
		             if(x==1) {
		            	Individu i6=new Individu(false,true);
		     			liste.set(k,i6);
		     			return Contamine;
		             }else {
		            	 return NonContamine;
		             }
				}else if(i5.getContamine()==true) {
					return Contamine;
				}
			}
		}else {
			for(int m=0;m<g;m++) {
				if(i5.getVaccine()==true &&i5.getContamine()==false) {
					 int min_val = 1;
		             int max_val = 8;
		             Random ran = new Random();
		             int x = ran.nextInt(max_val) + min_val;
		             
		             if(x==1) {
		            	Individu i6=new Individu(true,true);
		     			liste.set(k,i6);
		     			return Contamine;
		             }else {
		            	 return NonContamine;
		             }
				}else if(i5.getVaccine()==false &&i5.getContamine()==false) {
					 int min_val = 1;
		             int max_val = 4;
		             Random ran = new Random();
		             int x = ran.nextInt(max_val) + min_val;
		             
		             if(x==1) {
		            	Individu i6=new Individu(false,true);
		     			liste.set(k,i6);
		     			return Contamine;
		             }else {
		            	 return NonContamine;
		             }
				}else if(i5.getContamine()==true) {
					return Contamine;
				}
			}
		}
		return NonContamine;
	}
	public String[][] tour() {
		String[][] tabb=new String[100][100];
		for (int i = 0;i < tab.length; i++) {
	         for (int j = 0;j < tab[i].length;j++) {
	        		 tabb[i][j] = resultat(i,j);
	      }
		}
		return tabb;
	}
	
	//Get Population
	public int getPopulation() {
		return liste.size();
	}
	
	//Get Vaccinés
	public int getVaccines() {
		int compte=0;
		for(Individu i : liste){
			if(i.getVaccine()==true) {
				compte+=1;
			}
		}
		return compte;
	}
	
	//Get Contaminés
	public int getContamines() {
		int compt=0;
		for(Individu i : liste){
			if(i.getContamine()==true) {
				compt+=1;
			}
		}
		return compt;
	}
	
		
	//Get Vaccinés et contaminés
	public int getVaccinesCont() {
		int comp=0;
		for(Individu i : liste){
			if(i.getVaccine()==true && i.getContamine()==true) {
				comp+=1;
			}
		}
		return comp;
	}
		
	//Get Non Vaccinés et contaminés
	public int getNonVaccinesCont() {
		int com=0;
		for(Individu i : liste){
			if(i.getVaccine()==false && i.getContamine()==true) {
				com+=1;
			}
		}
		return com;
	}
		
		
	public void run(int nb_tours,int delai){
		for(int i=0;i<nb_tours;i++) {
			int cc=getContamines();
			
			tab=tour();
			affichTab();
			int a=getPopulation();
			int b=getVaccines();
			int c=getContamines();
			int d=getVaccinesCont();
			int g=getNonVaccinesCont();
			int f=i+1;
			System.out.println("Tour "+f);
			System.out.println("Populations : "+a);
			System.out.println("Vaccinés : "+b);
			System.out.println("Contaminés : "+c);
			System.out.println("Vaccinés contaminés : "+d);
			System.out.println("Non vaccinés contaminés : "+g);
			
			try {
				Thread.sleep(delai);
			} catch (InterruptedException e) {
					// TODO Auto-generated catch block
				e.printStackTrace();
			}
			tab=tour();
			//Arrêt lorsqu'aucun changement n'est détecté.
			if(cc==c || c==0) {
				break;
			}
		}
		System.out.println("Fin");
	}
	
}

